Module RhetosJobs
{
	Entity Job
	{
		Implements 'Rhetos.Jobs.IJob, Rhetos.Jobs' { RegisteredImplementation; }	
	}
	
	Entity TheEntity
	{
		ShortString Code { Autocode; DefaultValue 'item => "+"';}
		LongString Description;
	}
	
	Action Happy '(parameters, repository, userInfo) => 
	{
		var id = Guid.NewGuid();
		var action = new RhetosJobs.TheJob{ Description = $"TheJob started from Happy action {id}." };
		repository.RhetosJobs.TheEntity.Insert(new RhetosJobs.TheEntity { Description = action.Description });
		backgroundJob.Enqueue(action);
		backgroundJob.Enqueue(action);
		backgroundJob.Enqueue(action);
		backgroundJob.Enqueue(action);
		backgroundJob.Enqueue(action);
		backgroundJob.Enqueue(action);
	}'
	{
		RepositoryUses 'backgroundJob' 'Rhetos.Jobs.IBackgroundJob, Rhetos.Jobs';
	}
	
	Action HappyWithWait '(parameters, repository, userInfo) => 
	{
		var id = Guid.NewGuid();
		var action = new RhetosJobs.TheJob{ Description = $"TheJob started from HappyWithWait action {id}." };
		repository.RhetosJobs.TheEntity.Insert(new RhetosJobs.TheEntity { Description = action.Description });
		backgroundJob.Enqueue(action);
		System.Threading.Thread.Sleep(5000);
		throw new Rhetos.UserException("Ne može");
	}'
	{
		RepositoryUses 'backgroundJob' 'Rhetos.Jobs.IBackgroundJob, Rhetos.Jobs';
	}

	Action TheJob '(parameters, repository, userInfo) => 
	{
		var logger = logProvider.GetLogger("RhetosJobs");
		logger.Write(Rhetos.Logging.EventType.Info, () => parameters.Description);
		repository.RhetosJobs.ExecutedJob.Insert(new RhetosJobs.ExecutedJob { Description = parameters.Description});
		repository.RhetosJobs.TheEntity.Insert(new RhetosJobs.TheEntity { Description = parameters.Description });
	}'
	{
		LongString Description;
		RepositoryUses 'logProvider' 'Rhetos.Logging.ILogProvider, Rhetos.Logging.Interfaces';
	}
	
	Entity ExecutedJob
	{
		LongString Description;
	}
}